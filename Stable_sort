/*
The number of tasks performed by Monk A on the ith day is the number of ones in the binary representation of Arrayi.

Monk A is fed up of Monk D, so to irritate him even more, he decides to print the tasks provided in non-decreasing order of the tasks performed by him on each day. Help him out!

Input:
The first line of input contains an integer T, where T is the number of test cases.
The first line of each test case contains N, where N is the number of days.
The second line of each test case contains Array array having N elements, where Arrayi represents the number of tasks provided by Monk D to Monk A on ith day.

Output:
Print all the tasks provided to Monk A in the non-decreasing order of number of tasks performed by him.

Constraints:
1 <= T <= 100
1 <= N <= 105
1 <= Arrayi <= 1e18
sample Input:
1
4
3 4 7 10
Output:
4 3 10 7

Explaination:

In the sample input, T = 1 and N = 4, where N is the number of days.

Tasks provided to Monk A on first day is 3 and binary representation of 3 is { 11 }2, which contains 2 ones.

Tasks provided to Monk A on second day is 4 and binary representation of 4 is { 100 }2, which contains 1 ones.

Tasks provided to Monk A on third day is 7 and binary representation of 7 is { 111 }2, which contains 3 ones.

Tasks provided to Monk A on fourth day is 10 and binary representation of 10 is { 1010 }2, which contains 2 ones.

So the Output will be: 4 3 10 7
*/
//https://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/practice-problems/algorithm/monk-and-tasks/
#include <bits/stdc++.h>
using namespace std;
#define ll  long long int
ll no1(ll x)
{
	int cnt=0;
	for(ll i=0;i<64;i++)
	if(x & (ll)(1<<i)) cnt++;
	return cnt;
}
int cmp(pair<ll,ll>p1,pair<ll,ll>p2)
{
	if(p1.first==p2.first) 
	   return 0;
	else 
	   return p1.first < p2.first;
}
int main()
{
    ll t,n;
    cin>>t;
    while(t--)
    {
    	cin>>n;
    	ll x,n1;
    	vector < pair<ll,ll> >A;
    	for(int i=0;i<n;i++)
    	 {
    	 	cin>>x;
    	 	n1=no1(x);
    	 	A.push_back(make_pair(n1,x));
    	 }
    	stable_sort(A.begin(),A.end(),cmp);
    	for(int i=0;i<n;i++)
    	cout<<A[i].second<<" ";
    	cout<<endl;
    }
    return 0;
}
